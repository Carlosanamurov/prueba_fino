name: Deploy to Production

on:
  push:
    branches: [main]

env:
  APP_DIR: /opt/app
  DOCKER_COMPOSE_FILE: docker-compose.prod.yml
  DOCKER_IMAGE: ghcr.io/carlosanamurov/prueba_fino/fastapi-app:latest

jobs:
  verify-files:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Asegura que se descarguen todos los archivos

      - name: Verify required files
        run: |
          echo "📂 Contenido del repositorio:"
          ls -la
          
          if [ ! -f "$DOCKER_COMPOSE_FILE" ]; then
            echo "::error::❌ Error: $DOCKER_COMPOSE_FILE no encontrado en el repositorio"
            echo "Archivos disponibles:"
            ls
            exit 1
          fi
          
          echo "✅ Archivos verificados correctamente"

  build-and-push:
    needs: verify-files
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.TOKEN_DOS }}  # Cambiado a GITHUB_TOKEN

      - name: Build and push Docker image
        run: |
          docker build -t $DOCKER_IMAGE .
          docker push $DOCKER_IMAGE

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install sshpass
        run: sudo apt-get update && sudo apt-get install -y sshpass

      - name: Prepare server directory
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_PASS: ${{ secrets.SSH_PASSWORD }}
        run: |
          sshpass -p "$SSH_PASS" ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST \
            "sudo mkdir -p $APP_DIR && sudo chown $SSH_USER:$SSH_USER $APP_DIR"

      - name: Copy deployment files
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_PASS: ${{ secrets.SSH_PASSWORD }}
        run: |
          echo "📤 Copiando archivos al servidor..."
          
          # Verificar nuevamente que el archivo existe
          if [ ! -f "$DOCKER_COMPOSE_FILE" ]; then
            echo "::error::❌ Error crítico: $DOCKER_COMPOSE_FILE no encontrado"
            exit 1
          fi
          
          # Copiar con verificación detallada
          sshpass -p "$SSH_PASS" scp -v -o StrictHostKeyChecking=no $DOCKER_COMPOSE_FILE $SSH_USER@$SSH_HOST:$APP_DIR/
          
          # Crear archivo .env
          sshpass -p "$SSH_PASS" ssh -v -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST "cat > $APP_DIR/.env" <<EOF
          MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}
          MYSQL_USER=${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}
          MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}
          DB_REMOTE_HOST=${{ secrets.DB_REMOTE_HOST }}
          DB_REMOTE_USER=${{ secrets.DB_REMOTE_USER }}
          DB_REMOTE_PASSWORD=${{ secrets.DB_REMOTE_PASSWORD }}
          DB_REMOTE_NAME=${{ secrets.DB_REMOTE_NAME }}
          EOF

      - name: Deploy application
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_PASS: ${{ secrets.SSH_PASSWORD }}
        run: |
          sshpass -p "$SSH_PASS" ssh -v -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST << 'DEPLOY_EOF'
          cd $APP_DIR
          echo "🔐 Autenticando en GHCR..."
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
          echo "🔄 Obteniendo imágenes..."
          docker-compose -f $DOCKER_COMPOSE_FILE pull || echo "⚠️ Error al obtener imágenes"
          
          echo "🚀 Iniciando servicios..."
          docker-compose -f $DOCKER_COMPOSE_FILE up -d
          
          echo "📦 Contenedores en ejecución:"
          docker ps
          
          echo "🌐 Verificando salud de la aplicación..."
          curl -v http://localhost:8000/health || echo "⚠️ La aplicación no responde"
          DEPLOY_EOF