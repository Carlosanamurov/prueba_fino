name: Deploy to Production

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install sshpass
        run: sudo apt-get update && sudo apt-get install -y sshpass

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}  # Cambiado a GHCR_TOKEN para mejor prÃ¡ctica

      - name: Test SSH Connection
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_PASS: ${{ secrets.SSH_PASSWORD }}
        run: |
          echo "Testing SSH connection to $SSH_USER@$SSH_HOST"
          if ! sshpass -p "$SSH_PASS" ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 -v $SSH_USER@$SSH_HOST "echo 'SSH Connection Successful'"; then
            echo "::error::Failed to establish SSH connection"
            exit 1
          fi

      - name: Copy files to server via SSH
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_PASS: ${{ secrets.SSH_PASSWORD }}
        run: |
          set -e  # Exit immediately if any command fails
          
          echo "Creating /opt/app directory on server..."
          if ! sshpass -p "$SSH_PASS" ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST "mkdir -p /opt/app"; then
            echo "::error::Failed to create directory"
            exit 1
          fi
          
          echo "Copying docker-compose.prod.yml to server..."
          if ! sshpass -p "$SSH_PASS" scp -o StrictHostKeyChecking=no -v docker-compose.prod.yml $SSH_USER@$SSH_HOST:/opt/app/; then
            echo "::error::Failed to copy docker-compose file"
            exit 1
          fi
          
          echo "Creating .env file on server..."
          if ! sshpass -p "$SSH_PASS" ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST "cat > /opt/app/.env" <<EOF
          MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}
          MYSQL_USER=${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}
          MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}
          DB_REMOTE_HOST=${{ secrets.DB_REMOTE_HOST }}
          DB_REMOTE_USER=${{ secrets.DB_REMOTE_USER }}
          DB_REMOTE_PASSWORD=${{ secrets.DB_REMOTE_PASSWORD }}
          DB_REMOTE_NAME=${{ secrets.DB_REMOTE_NAME }}
          EOF
          then
            echo "::error::Failed to create .env file"
            exit 1
          fi

      - name: Deploy with Docker Compose
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_PASS: ${{ secrets.SSH_PASSWORD }}
        run: |
          set -e
          echo "Starting deployment on server..."
          if ! sshpass -p "$SSH_PASS" ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST << 'EOF'
          cd /opt/app
          echo "Pulling latest images..."
          docker-compose -f docker-compose.prod.yml pull
          echo "Starting containers..."
          docker-compose -f docker-compose.prod.yml up -d
          echo "Deployment completed successfully"
          EOF
          then
            echo "::error::Deployment failed"
            exit 1
          fi