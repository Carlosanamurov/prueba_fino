name: Deploy to Production

on:
  push:
    branches: [main]

env:
  DOCKER_IMAGE: ghcr.io/carlosanamurov/prueba_fino/fastapi-app:latest

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Debug - Mostrar estructura del repo
        run: |
           pwd
           ls -la
           ls -la app
           cat app/main.py | head -20
      
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.TOKEN_DOS }}
          
      - name: Build and push
        run: |
          docker build -t $DOCKER_IMAGE .
          docker push $DOCKER_IMAGE

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install sshpass
        run: sudo apt-get update && sudo apt-get install -y sshpass
      
      - name: Verify files exist
        run: |
          ls -la docker-compose.prod.yml || exit 1
          ls -la mysql-config.cnf || exit 1
          ls -la .env.prod || exit 1
          # Verificación adicional del contenido
          if ! grep -q "MYSQL_ROOT_PASSWORD" .env.prod; then
            echo "ERROR: MYSQL_ROOT_PASSWORD no encontrado en .env.prod"
            exit 1
          fi
      
      - name: Deploy to server
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_PASS: ${{ secrets.SSH_PASSWORD }}
        run: |
          # Transferencia segura con verificación
          sshpass -p "$SSH_PASS" scp -o StrictHostKeyChecking=no -v \
            docker-compose.prod.yml mysql-config.cnf .env.prod \
            $SSH_USER@$SSH_HOST:/opt/app/
          
          # Configuración remota de permisos
          sshpass -p "$SSH_PASS" ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST << 'REMOTE_EOF'
          set -e
          cd /opt/app
          
          # Verificar que el archivo .env.prod existe y tiene contenido
          if [ ! -f .env.prod ] || ! grep -q "MYSQL_ROOT_PASSWORD" .env.prod; then
            echo "ERROR: Archivo .env.prod no válido en el servidor remoto"
            exit 1
          fi
          
          # Ajustar permisos
          sudo chmod 600 .env.prod
          sudo chown $USER:docker .env.prod
          
          # Login a GHCR usando el token
          echo "${{ secrets.TOKEN_DOS }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
          # Despliegue
          docker-compose -f docker-compose.prod.yml down -v
          docker-compose -f docker-compose.prod.yml up -d
          
          # Esperar a MySQL con manejo de errores
          for i in {1..12}; do
            if docker compose -f docker-compose.prod.yml exec mysql-container-1 \
              mysqladmin ping -h localhost -u root --password="$(grep MYSQL_ROOT_PASSWORD .env.prod | cut -d '=' -f2)" --silent; then
              echo "MySQL está listo"
              break
            fi
            echo "Esperando a MySQL... (intento $i/12)"
            sleep 5
          done
          REMOTE_EOF